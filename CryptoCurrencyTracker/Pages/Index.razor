@page "/"
@inject HttpClient Http

@*<P_SlideCoins />*@
<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Centered="false" Class="my-6" Color="Color.Dark">
        <MudTabPanel Icon="@Icons.Material.Filled.TableRows" Text="Table" BadgeDot="true" BadgeColor="Color.Success">
            @if (CoinList != null && CoinList.Count() > 0)
            {
                <P_CoinList Data="CoinList" />
            }
        </MudTabPanel>
        <MudTabPanel Icon="@Icons.Material.Filled.Api" Text="List" BadgeDot="true" BadgeColor="Color.Error">
            @if (TrendingCoins != null && TrendingCoins.Count() > 0)
            {
                <P_TrendingCoins Data="TrendingCoins" />
            }
        </MudTabPanel>
    </MudTabs>
</MudContainer>


@code {
    List<TrendingCoinsModel> TrendingCoins = new List<TrendingCoinsModel>();
    List<CoinListModel> CoinList = new List<CoinListModel>();

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var data1 = Http.GetFromJsonAsync<TrendingCoinsModel[]>(ApiUrl.TrendingCoinsV2("USD"));
                var data2 = Http.GetFromJsonAsync<CoinListModel[]>(ApiUrl.CoinList("USD"));
                await Task.WhenAll(data1, data2);
                TrendingCoins = data1.Result.ToList();
                CoinList = data2.Result.ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
            }
        }
    }
}