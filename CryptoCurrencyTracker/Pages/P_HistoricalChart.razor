@using ChartJs.Blazor.LineChart
@inject IApiService _apiService
<MudCard>
    <MudCardContent>
        <Chart Config="_config" @ref="_chart" />
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public string Name { get; set; } = "";
    [Parameter] public string CoinId { get; set; } = "";
    public HistoricalChartModel Data { get; set; } = new HistoricalChartModel();

    private const int InitalCount = 7;
    private LineConfig _config;
    private Chart _chart;
    private string[] randomColor = new[]
    {
        ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
        ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
        ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
        ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
    };

    protected override void OnInitialized()
    {
        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = false,
                        Text = Name
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new Hover
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                {
                    new CategoryAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            LabelString = "Month"
                        }
                    }
                },
                        YAxes = new List<CartesianAxis>
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            LabelString = "Value"
                        }
                    }
                }
                    }
                }
            };
    }

    protected override async Task OnParametersSetAsync()
    {
        var data1 = await _apiService.GetHistoricalChartAsync(CoinId, 7);
        if (data1 != null)
        {
            Data = data1;
            Data.is_success = true;

            Random random = new Random();
            int index = random.Next(0, 4);

            IDataset<int> dataset1 = new LineDataset<int>(Data.prices.Select(x => Convert.ToInt32(x[1])).ToArray())
                {
                    Label = Name,
                    BackgroundColor = randomColor[index],
                    BorderColor = randomColor[index],
                    Fill = FillingMode.Disabled
                };

            string[] items = new string[Data.prices.Count];
            string[] items2 = new string[Data.prices.Count];
            for (int i = 0; i < items.Length; i++)
            {
                items[i] = new DateTime(Convert.ToInt64(Data.prices[i][0])).ToString("hh:mm tt");
                items2[i] = new DateTime(Convert.ToInt64(Data.prices[i][0])).ToString("yy-MM-dd hh:mm tt");
            }
            Console.WriteLine(items2.ToJson());
            //items = items.Distinct().ToArray();
            items.ToList().ForEach(x =>
            {
                _config.Data.Labels.Add(x);
            });
            //Data.prices.ForEach(x =>
            //{
            //    _config.Data.Labels.Add(new DateTime(Convert.ToInt64(x[0])).ToString("hh:mm tt"));
            //});
            _config.Data.Datasets.Add(dataset1);
        }
    }
}